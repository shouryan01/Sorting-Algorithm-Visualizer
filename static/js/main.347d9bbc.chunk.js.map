{"version":3,"sources":["Algorithms/BubbleSort.js","Visualizer/Visualizer.js","App.js","serviceWorker.js","index.js"],"names":["BubbleSort","array","animations","length","i","j","push","e","console","log","SortingVisualizer","props","swap","temp","setState","state","arraySize","handleInput","bind","this","randomizeArray","min","max","Math","floor","random","bars","document","getElementsByClassName","isColorChange","bar1Index","bar2Index","bar1Style","style","bar2Style","setTimeout","backgroundColor","event","target","value","className","width","window","innerWidth","height","innerHeight","textAlign","map","index","key","type","name","onChange","onClick","bubbleSort","mergeSort","quickSort","heapSort","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.347d9bbc.chunk.js","sourcesContent":["function BubbleSort(array) {\n    const animations = [];\n\n    try {\n        if(array.length === 1) {\n            return array;\n        }\n    \n    // function delay(ms) {\n    //     return new Promise.all(resolve => setTimeout(resolve, ms));\n    // }\n        for(let i = 0; i < array.length - 1; i ++) {\n            for(let j = 0; j < array.length - i - 1; j ++) { \n                animations.push([j,j+1]); // comparing change color once\n                animations.push([j,j+1]); // change color back\n                if(array[j] > array[j + 1]) {\n                    // swap(array, j, j + 1);\n                }\n            }\n        }\n        return animations;\n    } catch (e) {\n        console.log(e);\n    }\n}\n\nconst swap = (array, i, j) => {\n    try {\n        let temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    } catch (e) {\n        console.log(e);\n    }\n};\n\nfunction visualize(array) {\n    \n    let bars = document.getElementById(\"bar\");\n    let row = document.createElement('div');\n\n    bars.innerHTML = 'idsjf';\n\n    array.map(value => {\n        let row = document.createElement('div');\n        row.innerHTML = value;\n        row.className = 'row';\n        row.style.width = `${value}px`;\n        bars.appendChild(row);\n    })\n}\n\nexport default BubbleSort;","import React from 'react';\nimport './Visualizer.css';\nimport BubbleSort from '../Algorithms/BubbleSort.js';\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            arraySize: 10\n        };\n\n        this.handleInput = this.handleInput.bind(this);\n    };\n\n    componentDidMount() {\n        this.randomizeArray();\n    };\n\n    randomizeArray() {\n        const array = [];\n\n        for(let i = 0; i < this.state.arraySize; i ++) {\n            array.push(randomInt(10, 510));\n        }\n        this.setState({ array: array });\n    };\n\n    bubbleSort() {\n        const animations = BubbleSort(this.state.array);\n        const { array } = this.state;\n        for(let i = 0; i < animations.length; i++) {\n            const bars = document.getElementsByClassName('bar');\n            const isColorChange = i % 2 === 0;\n            const [bar1Index, bar2Index] = animations[i];\n            const bar1Style = bars[bar1Index].style;\n            const bar2Style = bars[bar2Index].style;\n            if(isColorChange) {\n                setTimeout(() => {\n                    bar1Style.backgroundColor = 'darksalmon';\n                    bar2Style.backgroundColor = 'darksalmon';   \n                    if(array[bar1Index] > array[bar2Index]) {\n                        bar1Style.backgroundColor = 'darkseagreen';\n                        bar2Style.backgroundColor = 'darkseagreen';   \n                        this.swap(array, bar1Index, bar2Index);\n                    }\n                }, i * 250);\n            } else {\n                setTimeout(() => {\n                    bar1Style.backgroundColor = 'pink';\n                    bar2Style.backgroundColor = 'pink';    \n                }, i * 250);\n            }\n        }   \n\n    };\n\n    swap = (array, i, j) => {\n        try {\n            let temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n            this.setState({\n                array: array\n            })\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    mergeSort() {\n\n    };\n\n    quickSort() {\n\n    };\n\n    heapSort() {\n\n    };\n\n    handleInput(event) {\n        if(event.target.value < 311 && event.target.value > 9) {\n            this.setState({\n                arraySize: event.target.value\n            })\n            this.randomizeArray();\n        }\n    };\n\n    drawBars(array) {\n        \n    }\n\n    render() {\n        const { array } = this.state;\n\n        return (\n            <div className=\"container\" style={{backgroundColor: \"lightyellow\", width: window.innerWidth, height: window.innerHeight, \n            textAlign: \"center\"}}>\n                {array.map((value, index) => (\n                    <div className=\"bar\" key={index} style={{height: `${value}px`, width: window.innerWidth / this.state.arraySize / 2}}>\n                    </div>\n                ))}\n\n                <div style={{textAlign: \"center\"}}>\n                    <input type=\"text\" name=\"arraySize\" onChange={this.handleInput} />  \n                    <br />\n                    <br />\n                    <button onClick={() => this.randomizeArray()}>New Array</button>\n                    <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n                    <button onClick={() => this.mergeSort()}>Merge Sort</button>\n                    <button onClick={() => this.quickSort}>Quick Sort</button>\n                    <button onClick={() => this.heapSort()}>Heap Sort</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './Visualizer/Visualizer';\n\nfunction App() {\n  return (\n    <SortingVisualizer></SortingVisualizer>\n  );    \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}