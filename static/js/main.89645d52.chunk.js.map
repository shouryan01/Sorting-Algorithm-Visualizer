{"version":3,"sources":["Algorithms/BubbleSort.js","Visualizer/Visualizer.js","App.js","serviceWorker.js","index.js"],"names":["BubbleSort","array","animations","length","i","j","push","e","console","log","SortingVisualizer","props","swapx","temp","setState","state","w","arraySize","sortSpeed","values","states","handleInput","bind","this","bars","document","getElementsByClassName","isColorChange","bar1Index","bar2Index","bar1Style","style","bar2Style","setTimeout","backgroundColor","swap","event","target","value","map","index","className","key","height","width","window","innerWidth","borderTopLeftRadius","borderTopRightRadius","arr","sleep","start","end","draw","partition","Promise","all","quickSort","pivotValue","pivotIndex","total","avg","splice","slice","sort","a","b","ms","resolve","min","max","Math","floor","innerHeight","random","setup","p5","parentRef","createCanvas","Array","newArray","clear","background","fill","stroke","rect","marginRight","marginTop","x","xmin","xmax","xstep","onChange","onDragEnd","Sk","type","marginLeft","disabled","marginBottom","onClick","bubbleSort","margin","insertionSort","selectionSort","mergeSort","heapSort","thanosSort","trumpSort","bernieSort","stalinSort","tiananmenSort","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.89645d52.chunk.js","sourcesContent":["function BubbleSort(array) {\n    const animations = [];\n\n    try {\n        if(array.length === 1) {\n            return array;\n        }\n        for(let i = 0; i < array.length - 1; i ++) {\n            for(let j = 0; j < array.length - i - 1; j ++) { \n                animations.push([j,j+1]); // comparing change color once\n                animations.push([j,j+1]); // change color back\n            }\n        }\n        return animations;\n    } catch (e) {\n        console.log(e);\n    }\n}\n\nexport default BubbleSort;","import React from 'react';\nimport './Visualizer.css';\nimport Slider from 'react-input-slider';\nimport Sketch from 'react-p5';\nimport BubbleSort from '../Algorithms/BubbleSort.js';\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            w: 10,\n            array: [],\n            arraySize: 1,\n            sortSpeed: 250,\n            values: [],\n            states: []\n        };\n\n        this.handleInput = this.handleInput.bind(this);\n    };\n\n    // randomizeArray() {\n    //     const array = [];\n\n    //     for(let i = 0; i < this.state.arraySize; i ++) {\n    //         array.push(randomInt(10, 510));\n    //     }\n    //     this.setState({ array: array });\n\n    //     return array;\n    // };\n    bubbleSort1() {\n        const animations = BubbleSort(this.state.array);\n        const { array } = this.state;\n        for(let i = 0; i < animations.length; i++) {\n            const bars = document.getElementsByClassName('bar');\n            const isColorChange = i % 2 === 0;\n            const [bar1Index, bar2Index] = animations[i];\n            const bar1Style = bars[bar1Index].style;\n            const bar2Style = bars[bar2Index].style;\n            if(isColorChange) {\n                setTimeout(() => {\n                    bar1Style.backgroundColor = 'darksalmon';\n                    bar2Style.backgroundColor = 'darksalmon';   \n                    if(array[bar1Index] > array[bar2Index]) {\n                        bar1Style.backgroundColor = 'darkseagreen';\n                        bar2Style.backgroundColor = 'darkseagreen';   \n                        this.swap(array, bar1Index, bar2Index);\n                    }\n                }, i * (251 - this.state.sortSpeed));\n            } else {\n                setTimeout(() => {\n                    bar1Style.backgroundColor = 'pink';\n                    bar2Style.backgroundColor = 'pink';    \n                }, i * (251 - this.state.sortSpeed));\n            }\n        }   \n    };\n    swapx = (array, i, j) => {\n        try {\n            let temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n            this.setState({\n                array: array\n            })\n        } catch (e) {\n            console.log(e);\n        }\n    };\n    handleInput(event) {\n        if(event.target.value < 100 && event.target.value > 1) {\n            this.setState({\n                arraySize: event.target.value\n            })\n        }\n    };\n    drawBars(array) {\n        return (\n            <div>\n                {array.map((value, index) => (\n                        <div className=\"bar\" key={index} style={{height: `${value}px`, width: window.innerWidth / this.state.arraySize / 2, borderTopLeftRadius:20, borderTopRightRadius: 20}}></div>\n                ))}\n            </div>\n        );\n    }\n\n    async bubbleSort(arr) {\n        await this.sleep(251 - this.state.sortSpeed);\n        let temp;\n        for(let i = 0; i < arr.length; i++) {\n            for(let j = 0; j < arr.length - i - 1; j ++) { \n                if(arr[j] > arr[j + 1]) {\n                    this.state.values[j] = temp;\n                    this.state.values[j] = this.state.values[j + 1];\n                    this.state.values[j + 1] = temp;\n                }\n            }\n        }\n    }\n    \n    insertionSort() {\n\n    };\n\n    selectionSort() {\n\n    };\n\n    async quickSort(arr, start, end) {\n        this.setState({\n            draw: true\n        })\n        if (start >= end) {\n            return;\n        }\n        let index = await this.partition(arr, start, end);\n        this.state.states[index] = -1;\n\n        await Promise.all([\n            this.quickSort(arr, start, index - 1),\n            this.quickSort(arr, index + 1, end)\n        ]);\n    };\n\n    async partition(arr, start, end) {\n        for(let i = start; i < end; i ++) {\n            this.state.states[i] = 1;\n        }\n\n        let pivotValue = arr[end];\n        let pivotIndex = start;\n        this.state.states[pivotIndex] = 0;\n\n        for(let i = start; i < end; i ++) {\n            if(arr[i] < pivotValue) {\n                await this.swap(arr, i, pivotIndex);\n                this.state.states[pivotIndex] = -1;\n                pivotIndex ++;\n                this.state.states[pivotIndex] = 0;\n            }\n        }\n\n        await this.swap(arr, pivotIndex, end);\n\n        for(let i = start; i < end; i ++) {\n            if (i !== pivotIndex) {\n                this.state.states[i] = -1;\n            }\n        }\n\n        return pivotIndex;\n    };\n\n    mergeSort() {\n        \n    };\n\n    heapSort() {\n\n    };\n\n    trumpSort() {\n\n    };\n\n    async bernieSort(arr) {\n        //replace all values with the mean\n        var total = 0;\n        for(var i = 0; i < arr.length; i++) {\n            total += arr[i];\n        }\n        var avg = total / arr.length;\n\n        for(var i = 0; i < arr.length; i++) {\n            await this.sleep(15);\n            arr[i] = avg;\n        }\n    };\n\n    async thanosSort(arr) {\n        for (var i = 0; i < arr.length; i++) {\n            await this.sleep(15);\n            arr.splice(i + 1, 1);\n        }\n        this.quickSort(this.state.values, 0, this.state.values.length - 1);\n    };\n\n    //Description: Deletes all the elements that are not in order\n    async stalinSort(arr) {\n        const temp = arr.slice();\n        temp.sort();\n        for (var i = 0; i < arr.length; i++) {\n            if(arr[i] != temp[i]) {\n                await this.sleep(25);\n                arr.splice(i, 1);\n                i --;\n            }\n        }\n    };\n\n    async genghisKhanSort(arr) {\n        // delete all elements excpet the first, and replace all other elements with the first\n    };\n\n    async buddhaSort(arr) {\n        //  that the array, like all things, is ephemeral and its order is insignificant so you just leave it like that and pursue enlightenment instead.\n    };\n\n    async tiananmenSort(arr) {\n        //the sorting never happened because the array was always in order\n    };\n\n    //thot sort\n\n    async swap(arr, a, b) {\n        await this.sleep(251 - this.state.sortSpeed);\n        let temp = arr[a];\n        arr[a] = arr[b];\n        arr[b] = temp;\n    };\n\n    sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    };\n\n    newArray() {\n        const array = [];\n\n        for(let i = 0; i < Math.floor(window.innerWidth / this.state.w); i ++) {\n            array.push(randomInt(10, window.innerHeight - 158));\n        }\n        this.setState({ values: array });\n    }; \n\n    render() {\n        return (\n            <div className=\"App\" style = {{ backgroundColor: 'lightyellow', height: '100% !important'}}>\n\t\t\t\t<Sketch\n                    setup={(p5, parentRef) => {\n                        p5.createCanvas(window.innerWidth, window.innerHeight - 158);\n                        this.state.values = new Array(Math.floor(p5.width / this.state.w));\n                        this.newArray();\n\t\t\t\t\t}}\n                    \n                    draw = {(p5) => {\n                        p5.clear();\n                        p5.background('lightyellow');\n                        for (let i = 0; i < this.state.values.length; i ++) {\n                            p5.fill('pink');\n                            p5.stroke('lightyellow');\n                            p5.rect(i * this.state.w, p5.height - this.state.values[i], this.state.w, this.state.values[i], 20, 20, 0, 0);\n                        }\n                    \n                        \n                        // if(this.state.draw) {\n                        //     for (let i = 0; i < this.state.values.length; i ++) {\n                        //         if (this.state.states[i] === 0) {\n                        //             p5.fill('#E0777D');\n                        //         } else if (this.state.states[i] === 1) {\n                        //             p5.fill('#D6FFB7');\n                        //         } else {\n                        //             p5.fill(255);\n                        //         }\n                        //         p5.rect(i * this.state.w, p5.height - this.state.values[i], this.state.w, this.state.values[i]);\n                        //     }\n                        // } else {\n                        //     for (let i = 0; i < this.state.values.length; i ++) {\n                        //         p5.rect(i * this.state.w, p5.height - this.state.values[i], this.state.w, this.state.values[i]);\n                        //     }\n                        // }\n                        // this.setState({\n                        //     draw: false\n                        // })\n                    }}\n\t\t\t\t/>\n\n                <br />\n                <span style={{marginRight: 25, marginTop: 20}}>Size</span>\n                <Slider x={this.state.arraySize} xmin={1} xmax={window.innerWidth / 2} xstep={1} onChange={({x}) => this.setState({values: new Math.Array(Math.floor(window.innerWidth / x)) })} onDragEnd={() => this.Sk} />\n                <input type=\"text\" value={this.state.arraySize} style= {{ width: 22, marginLeft: 15}} disabled={true}/>\n                \n                <br/>\n                <span style={{marginRight: 25}}>Speed</span>\n                <Slider x={this.state.sortSpeed} xmin={1} xmax={250} xstep={1} onChange={({x}) => this.setState({ sortSpeed: x })}/>\n                <input type=\"text\" value={this.state.sortSpeed} style= {{ width: 22, marginLeft: 15, marginBottom: 10}} disabled={true}/>\n\n                <br />\n                <button onClick={() =>  this.newArray(this.state.values, 0, this.state.values.length - 1)}>New Array</button>\n\n                <br /><br /><br />\n                <button onClick={() =>  this.bubbleSort(this.state.values)} style={{ margin: 5 }}>Bubble Sort</button>\n                <button onClick={() =>  this.insertionSort(this.state.values, 0, this.state.values.length - 1)} style={{ margin: 5 }}>Insertion Sort</button>\n                <button onClick={() =>  this.selectionSort(this.state.values, 0, this.state.values.length - 1)} style={{ margin: 5 }}>Selection Sort</button>\n                <button onClick={() =>  this.quickSort(this.state.values, 0, this.state.values.length - 1)} style={{ margin: 5 }}>Quick Sort</button>\n                <button onClick={() =>  this.mergeSort(this.state.values, 0, this.state.values.length - 1)} style={{ margin: 5 }}>Merge Sort</button>\n                <button onClick={() =>  this.heapSort(this.state.values, 0, this.state.values.length - 1)} style={{ margin: 5 }}>Heap Sort</button>\n                <button onClick={() =>  this.thanosSort(this.state.values)} style={{ margin: 5 }}>Thanos Sort</button>\n                <button onClick={() =>  this.trumpSort(this.state.values)} style={{ margin: 5 }}>Trump Sort</button>\n                <button onClick={() =>  this.bernieSort(this.state.values)} style={{ margin: 5 }}>Bernie Sort</button>\n                <button onClick={() =>  this.stalinSort(this.state.values)} style={{ margin: 5 }}>Stalin Sort</button>\n                <button onClick={() =>  this.tiananmenSort(this.state.values)} style={{ margin: 5 }}>Tiananmen Sort</button>\n\t\t\t</div>\n        );\n\n        // const { array } = this.state;\n        // const bars = this.drawBars(array);\n\n        // return (\n        //     <div className=\"container\" style={{backgroundColor: \"lightyellow\", width: window.innerWidth, height: window.innerHeight, textAlign: \"center\"}}>\n        //         <span style={{marginRight: 25}}>Size</span>\n        //         <Slider x={this.state.arraySize} xmin={5} xmax={100} xstep={5} onChange={({x}) => this.setState({ arraySize: x })} onDragEnd={() => this.randomizeArray()}/>\n        //         <input type=\"text\" value={this.state.arraySize} style= {{ width: 22, marginLeft: 15}} disabled={true}/>\n        //         <br/>\n        //         <span style={{marginRight: 25}}>Speed</span>\n        //         <Slider x={this.state.sortSpeed} xmin={1} xmax={250} xstep={1} onChange={({x}) => this.setState({ sortSpeed: x })}/>\n        //         <input type=\"text\" value={this.state.sortSpeed} style= {{ width: 22, marginLeft: 15}} disabled={true}/>\n        //         <br /><br/><br/>\n        //         {bars}\n                \n        //         <br />\n        //             <button onClick={() => this.randomizeArray()}>New Array</button>\n        //         <div style={{textAlign: \"center\"}}>\n        //             <br/>                    \n        //             <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        //             <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        //             <button onClick={() => this.selectionSort()}>Selection Sort</button>\n        //             <button onClick={() => this.insertionSort()}>insertion Sort</button>\n        //         </div>\n        //     </div>\n        // )\n    }\n}\n\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './Visualizer/Visualizer';\n\nfunction App() {\n  return (\n    <SortingVisualizer></SortingVisualizer>\n  );    \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}