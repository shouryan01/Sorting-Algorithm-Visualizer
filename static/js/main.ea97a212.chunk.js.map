{"version":3,"sources":["Algorithms/BubbleSort.js","Algorithms/QuickSort.js","Algorithms/MergeSort.js","Visualizer/Visualizer.js","App.js","serviceWorker.js","index.js"],"names":["BubbleSort","array","animations","length","i","j","push","e","console","log","QuickSort","l","g","pivot","x","MergeSort","tempArray","slice","divide","startIndex","endIndex","midIndex","Math","floor","k","conquer","SortingVisualizer","props","swap","temp","setState","state","arraySize","sortSpeed","handleInput","bind","this","randomizeArray","min","max","random","bars","document","getElementsByClassName","isColorChange","bar1Index","bar2Index","bar1Style","style","bar2Style","setTimeout","backgroundColor","barOneStyle","barTwoStyle","color","barOneIdx","newHeight","height","event","target","value","map","index","className","key","width","window","innerWidth","borderTopLeftRadius","borderTopRightRadius","drawBars","innerHeight","textAlign","marginRight","xmin","xmax","xstep","onChange","onDragEnd","type","marginLeft","disabled","onClick","bubbleSort","mergeSort","selectionSort","insertionSort","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iTAmBeA,MAnBf,SAAoBC,GAChB,IAAMC,EAAa,GAEnB,IACI,GAAoB,IAAjBD,EAAME,OACL,OAAOF,EAEX,IAAI,IAAIG,EAAI,EAAGA,EAAIH,EAAME,OAAS,EAAGC,IACjC,IAAI,IAAIC,EAAI,EAAGA,EAAIJ,EAAME,OAASC,EAAI,EAAGC,IACrCH,EAAWI,KAAK,CAACD,EAAEA,EAAE,IACrBH,EAAWI,KAAK,CAACD,EAAEA,EAAE,IAG7B,OAAOH,EACT,MAAOK,GACLC,QAAQC,IAAIF,K,QCWLG,MA1Bf,SAASA,EAAUT,GACf,IAAMC,EAAa,GACfS,EAAI,GACJJ,EAAI,GACJK,EAAI,GAER,GAAGX,EAAME,OAAS,EAAG,CACjB,IADiB,EACbU,EAAQZ,EAAM,GADD,cAEJA,GAFI,IAEjB,IAAI,EAAJ,qBAAoB,CAAC,IAAba,EAAY,QACZA,EAAID,EACJF,EAAEL,KAAKQ,GACAA,GAAKD,EACZN,EAAED,KAAKQ,GAEPF,EAAEN,KAAKQ,IARE,8BAcjB,OAHAZ,EAAWI,KAAoB,EAAfI,EAAUC,IAC1BT,EAAWI,KAAS,EAAJC,GAChBL,EAAWI,KAAoB,EAAfI,EAAUE,IACnBV,EAEP,OAAOD,GC+CAc,MArEf,SAAmBd,GACf,IAAMC,EAAa,GACnB,GAAGD,EAAME,QAAU,EACf,OAAOF,EAEX,IAAMe,EAAYf,EAAMgB,QAExB,OAGJ,SAASC,EAAOjB,EAAOkB,EAAYC,EAAUJ,EAAWd,GACpD,GAAGiB,IAAeC,EACd,OAEJ,IAAMC,EAAWC,KAAKC,OAAOJ,EAAaC,GAAY,GACtDF,EAAOF,EAAWG,EAAYE,EAAUpB,EAAOC,GAC/CgB,EAAOF,EAAWK,EAAW,EAAGD,EAAUnB,EAAOC,GAIrD,SAAiBD,EAAOkB,EAAYE,EAAUD,EAAUJ,EAAWd,GAC/D,IAAIsB,EAAIL,EACJf,EAAIe,EACJd,EAAIgB,EAAW,EACnB,KAAMjB,GAAKiB,GAAYhB,GAAKe,GAGxBlB,EAAWI,KAAK,CAACF,EAAGC,IAGpBH,EAAWI,KAAK,CAACF,EAAGC,IAChBW,EAAUZ,IAAMY,EAAUX,IAG1BH,EAAWI,KAAK,CAACkB,EAAGR,EAAUZ,KAC9BH,EAAMuB,KAAOR,EAAUZ,OAIvBF,EAAWI,KAAK,CAACkB,EAAGR,EAAUX,KAC9BJ,EAAMuB,KAAOR,EAAUX,MAG/B,KAAOD,GAAKiB,GAGRnB,EAAWI,KAAK,CAACF,EAAGA,IAGpBF,EAAWI,KAAK,CAACF,EAAGA,IAGpBF,EAAWI,KAAK,CAACkB,EAAGR,EAAUZ,KAC9BH,EAAMuB,KAAOR,EAAUZ,KAE3B,KAAOC,GAAKe,GAGRlB,EAAWI,KAAK,CAACD,EAAGA,IAGpBH,EAAWI,KAAK,CAACD,EAAGA,IAGpBH,EAAWI,KAAK,CAACkB,EAAGR,EAAUX,KAC9BJ,EAAMuB,KAAOR,EAAUX,KAhD3BoB,CAAQxB,EAAOkB,EAAYE,EAAUD,EAAUJ,EAAWd,GAX1DgB,CAAOjB,EAAO,EAAGA,EAAME,OAAS,EAAGa,EAAWd,GACvCA,G,OCMUwB,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAqDVC,KAAO,SAAC3B,EAAOG,EAAGC,GACd,IACI,IAAIwB,EAAO5B,EAAMG,GACjBH,EAAMG,GAAKH,EAAMI,GACjBJ,EAAMI,GAAKwB,EACX,EAAKC,SAAS,CACV7B,MAAOA,IAEb,MAAOM,GACLC,QAAQC,IAAIF,KA7DhB,EAAKwB,MAAQ,CACT9B,MAAO,GACP+B,UAAW,EACXC,UAAW,GAGf,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBARJ,E,gEAYfC,KAAKC,mB,uCAML,IAFA,IAqKWC,EAAKC,EArKVtC,EAAQ,GAENG,EAAI,EAAGA,EAAIgC,KAAKL,MAAMC,UAAW5B,IACrCH,EAAMK,MAkKCgC,EAlKc,GAkKTC,EAlKa,IAmK1BjB,KAAKC,MAAMD,KAAKkB,UAAYD,EAAMD,EAAM,GAAKA,KA/JhD,OAFAF,KAAKN,SAAS,CAAE7B,MAAOA,IAEhBA,I,mCAMP,IAHU,IAAD,OACHC,EAAaF,EAAWoC,KAAKL,MAAM9B,OACjCA,EAAUmC,KAAKL,MAAf9B,MAFC,WAGDG,GACJ,IAAMqC,EAAOC,SAASC,uBAAuB,OACvCC,EAAgBxC,EAAI,IAAM,EAL3B,cAM0BF,EAAWE,GANrC,GAMEyC,EANF,KAMaC,EANb,KAOCC,EAAYN,EAAKI,GAAWG,MAC5BC,EAAYR,EAAKK,GAAWE,MAC/BJ,EACCM,YAAW,WACPH,EAAUI,gBAAkB,aAC5BF,EAAUE,gBAAkB,aACzBlD,EAAM4C,GAAa5C,EAAM6C,KACxBC,EAAUI,gBAAkB,eAC5BF,EAAUE,gBAAkB,eAC5B,EAAKvB,KAAK3B,EAAO4C,EAAWC,MAEjC1C,GAAK,IAAM,EAAK2B,MAAME,YAEzBiB,YAAW,WACPH,EAAUI,gBAAkB,OAC5BF,EAAUE,gBAAkB,SAC7B/C,GAAK,IAAM,EAAK2B,MAAME,aApBzB7B,EAAI,EAAGA,EAAIF,EAAWC,OAAQC,IAAM,EAApCA,K,kCA0CR,IAHS,IAAD,OACFF,EAAaa,EAAUqB,KAAKL,MAAM9B,OADhC,GAEUmC,KAAKL,MAAf9B,MAFA,SAGAG,GACJ,IAAMqC,EAAOC,SAASC,uBAAuB,OAE7C,GADsBvC,EAAI,IAAM,EACd,CAAC,IAAD,cACeF,EAAWE,GAD1B,GACTyC,EADS,KACEC,EADF,KAEVM,EAAcX,EAAKI,GAAWG,MAC9BK,EAAcZ,EAAKK,GAAWE,MAC9BM,EAAQlD,EAAI,IAAM,EAAI,eAAgB,OAC5C8C,YAAW,WACTE,EAAYD,gBAAkBG,EAC9BD,EAAYF,gBAAkBG,IAC7BlD,GAAK,IAAM,EAAK2B,MAAME,iBAEzBiB,YAAW,WAAO,IAAD,cACgBhD,EAAWE,GAD3B,GACRmD,EADQ,KACGC,EADH,KAEKf,EAAKc,GAAWP,MACxBS,OAAZ,UAAwBD,EAAxB,QACCpD,GAAK,IAAM,EAAK2B,MAAME,cAjBvB7B,EAAI,EAAGA,EAAIF,EAAWC,OAAQC,IAAM,EAApCA,K,kCAuBWM,EAAU0B,KAAKL,MAAM9B,S,wJAuChCyD,GACLA,EAAMC,OAAOC,MAAQ,KAAOF,EAAMC,OAAOC,MAAQ,GAChDxB,KAAKN,SAAS,CACVE,UAAW0B,EAAMC,OAAOC,U,+BAK3B3D,GAAQ,IAAD,OACZ,OACI,6BACKA,EAAM4D,KAAI,SAACD,EAAOE,GAAR,OACH,yBAAKC,UAAU,MAAMC,IAAKF,EAAOd,MAAO,CAACS,OAAO,GAAD,OAAKG,EAAL,MAAgBK,MAAOC,OAAOC,WAAa,EAAKpC,MAAMC,UAAY,EAAGoC,oBAAoB,GAAIC,qBAAsB,Y,+BAM5K,IAAD,OACGpE,EAAUmC,KAAKL,MAAf9B,MACFwC,EAAOL,KAAKkC,SAASrE,GAE3B,OACI,yBAAK8D,UAAU,YAAYf,MAAO,CAACG,gBAAiB,cAAec,MAAOC,OAAOC,WAAYV,OAAQS,OAAOK,YAAaC,UAAW,WAChI,0BAAMxB,MAAO,CAACyB,YAAa,KAA3B,QACA,kBAAC,IAAD,CAAQ3D,EAAGsB,KAAKL,MAAMC,UAAW0C,KAAM,EAAGC,KAAM,IAAKC,MAAO,EAAGC,SAAU,gBAAE/D,EAAF,EAAEA,EAAF,OAAS,EAAKgB,SAAS,CAAEE,UAAWlB,KAAMgE,UAAW,kBAAM,EAAKzC,oBACzI,2BAAO0C,KAAK,OAAOnB,MAAOxB,KAAKL,MAAMC,UAAWgB,MAAQ,CAAEiB,MAAO,GAAIe,WAAY,IAAKC,UAAU,IAChG,6BACA,0BAAMjC,MAAO,CAACyB,YAAa,KAA3B,SACA,kBAAC,IAAD,CAAQ3D,EAAGsB,KAAKL,MAAME,UAAWyC,KAAM,EAAGC,KAAM,IAAKC,MAAO,EAAGC,SAAU,gBAAE/D,EAAF,EAAEA,EAAF,OAAS,EAAKgB,SAAS,CAAEG,UAAWnB,OAC7G,2BAAOiE,KAAK,OAAOnB,MAAOxB,KAAKL,MAAME,UAAWe,MAAQ,CAAEiB,MAAO,GAAIe,WAAY,IAAKC,UAAU,IAChG,6BAAM,6BAAK,6BACVxC,EAED,6BACI,4BAAQyC,QAAS,kBAAM,EAAK7C,mBAA5B,aACJ,yBAAKW,MAAO,CAACwB,UAAW,WACpB,6BACA,4BAAQU,QAAS,kBAAM,EAAKC,eAA5B,eACA,4BAAQD,QAAS,kBAAM,EAAKE,cAA5B,cACA,4BAAQF,QAAS,kBAAM,EAAKG,kBAA5B,kBACA,4BAAQH,QAAS,kBAAM,EAAKI,kBAA5B,wB,GA/K2BC,IAAMC,WCHtCC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtD,SAASuD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjG,QAAQiG,MAAMA,EAAMC,c","file":"static/js/main.ea97a212.chunk.js","sourcesContent":["function BubbleSort(array) {\n    const animations = [];\n\n    try {\n        if(array.length === 1) {\n            return array;\n        }\n        for(let i = 0; i < array.length - 1; i ++) {\n            for(let j = 0; j < array.length - i - 1; j ++) { \n                animations.push([j,j+1]); // comparing change color once\n                animations.push([j,j+1]); // change color back\n            }\n        }\n        return animations;\n    } catch (e) {\n        console.log(e);\n    }\n}\n\nexport default BubbleSort;","function QuickSort(array) {\n    const animations = [];\n    var l = [];\n    var e = [];\n    var g = [];\n\n    if(array.length > 1) {\n        var pivot = array[0];\n        for(var x of array) {\n            if (x < pivot) {\n                l.push(x);\n            } else if (x == pivot) {\n                e.push(x);\n            } else {\n                g.push(x);\n            }\n        }\n        animations.push(QuickSort(l) * 2);\n        animations.push(e * 2);\n        animations.push(QuickSort(g) * 2)\n        return animations\n    } else {\n        return array;\n    }\n}\n \nexport default QuickSort;","function MergeSort(array) {\n    const animations = [];\n    if(array.length <= 1) {\n        return array;\n    }\n    const tempArray = array.slice();\n    divide(array, 0, array.length - 1, tempArray, animations);\n    return animations;\n};\n\nfunction divide(array, startIndex, endIndex, tempArray, animations) {\n    if(startIndex === endIndex) {\n        return;\n    }\n    const midIndex = Math.floor((startIndex + endIndex) / 2);\n    divide(tempArray, startIndex, midIndex, array, animations);\n    divide(tempArray, midIndex + 1, endIndex, array, animations);\n    conquer(array, startIndex, midIndex, endIndex, tempArray, animations);\n};\n\nfunction conquer(array, startIndex, midIndex, endIndex, tempArray, animations) {\n    let k = startIndex;\n    let i = startIndex;\n    let j = midIndex + 1;\n    while(i <= midIndex && j <= endIndex) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n        if (tempArray[i] <= tempArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animations.push([k, tempArray[i]]);\n            array[k++] = tempArray[i++];\n        } else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animations.push([k, tempArray[j]]);\n            array[k++] = tempArray[j++];\n        }\n    }\n    while (i <= midIndex) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, tempArray[i]]);\n        array[k++] = tempArray[i++];\n    }\n    while (j <= endIndex) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, tempArray[j]]);\n        array[k++] = tempArray[j++];\n    }\n};\n\nexport default MergeSort;","import React from 'react';\nimport './Visualizer.css';\nimport BubbleSort from '../Algorithms/BubbleSort.js';\nimport QuickSort from '../Algorithms/QuickSort.js';\nimport MergeSort from '../Algorithms/MergeSort.js';\nimport Slider from 'react-input-slider';\n\n//selection\n//insertion\n//quick\n//heap\n//shell/bucket/radix\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            arraySize: 5,\n            sortSpeed: 1\n        };\n\n        this.handleInput = this.handleInput.bind(this);\n    };\n\n    componentDidMount() {\n        this.randomizeArray();\n    };\n\n    randomizeArray() {\n        const array = [];\n\n        for(let i = 0; i < this.state.arraySize; i ++) {\n            array.push(randomInt(10, 510));\n        }\n        this.setState({ array: array });\n\n        return array;\n    };\n\n    bubbleSort() {\n        const animations = BubbleSort(this.state.array);\n        const { array } = this.state;\n        for(let i = 0; i < animations.length; i++) {\n            const bars = document.getElementsByClassName('bar');\n            const isColorChange = i % 2 === 0;\n            const [bar1Index, bar2Index] = animations[i];\n            const bar1Style = bars[bar1Index].style;\n            const bar2Style = bars[bar2Index].style;\n            if(isColorChange) {\n                setTimeout(() => {\n                    bar1Style.backgroundColor = 'darksalmon';\n                    bar2Style.backgroundColor = 'darksalmon';   \n                    if(array[bar1Index] > array[bar2Index]) {\n                        bar1Style.backgroundColor = 'darkseagreen';\n                        bar2Style.backgroundColor = 'darkseagreen';   \n                        this.swap(array, bar1Index, bar2Index);\n                    }\n                }, i * (251 - this.state.sortSpeed));\n            } else {\n                setTimeout(() => {\n                    bar1Style.backgroundColor = 'pink';\n                    bar2Style.backgroundColor = 'pink';    \n                }, i * (251 - this.state.sortSpeed));\n            }\n        }   \n    };\n\n    swap = (array, i, j) => {\n        try {\n            let temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n            this.setState({\n                array: array\n            })\n        } catch (e) {\n            console.log(e);\n        }\n    };\n    \n\n    mergeSort() {\n        const animations = MergeSort(this.state.array);\n        const { array } = this.state;\n        for(let i = 0; i < animations.length; i++) {\n            const bars = document.getElementsByClassName('bar');\n            const isColorChange = i % 3 !== 2;\n            if(isColorChange) {\n              const [bar1Index, bar2Index] = animations[i];\n              const barOneStyle = bars[bar1Index].style;\n              const barTwoStyle = bars[bar2Index].style;\n              const color = i % 3 === 0 ? 'darkseagreen': 'pink';\n              setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n              }, i * (251 - this.state.sortSpeed));\n            } else {\n              setTimeout(() => {\n                const [barOneIdx, newHeight] = animations[i];\n                const barOneStyle = bars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n              }, i * (251 - this.state.sortSpeed));\n            }\n          }\n    };\n\n    quickSort() {\n        const animations = QuickSort(this.state.array);\n        // const { array } = this.state;\n        // for(let i = 0; i < animations.length; i++) {\n        //     const bars = document.getElementsByClassName('bar');\n        //     const isColorChange = i % 2 === 0;\n        //     const [bar1Index, bar2Index] = animations[i];\n        //     const bar1Style = bars[bar1Index].style;\n        //     const bar2Style = bars[bar2Index].style;\n        //     if(isColorChange) {\n        //         setTimeout(() => {\n        //             bar1Style.backgroundColor = 'darksalmon';\n        //             bar2Style.backgroundColor = 'darksalmon';   \n        //             if(array[bar1Index] > array[bar2Index]) {\n        //                 bar1Style.backgroundColor = 'darkseagreen';\n        //                 bar2Style.backgroundColor = 'darkseagreen';   \n        //                 this.swap(array, bar1Index, bar2Index);\n        //             }\n        //         }, i * (251 - this.state.sortSpeed));\n        //     } else {\n        //         setTimeout(() => {\n        //             bar1Style.backgroundColor = 'pink';\n        //             bar2Style.backgroundColor = 'pink';    \n        //         }, i * (251 - this.state.sortSpeed));\n        //     }\n        // }    \n    };\n\n    insertionSort() {\n\n    };\n\n    selectionSort() {\n\n    };\n\n    heapSort() {\n\n    };\n\n    handleInput(event) {\n        if(event.target.value < 100 && event.target.value > 1) {\n            this.setState({\n                arraySize: event.target.value\n            })\n        }\n    };\n\n    drawBars(array) {\n        return (\n            <div>\n                {array.map((value, index) => (\n                        <div className=\"bar\" key={index} style={{height: `${value}px`, width: window.innerWidth / this.state.arraySize / 2, borderTopLeftRadius:20, borderTopRightRadius: 20}}></div>\n                ))}\n            </div>\n        );\n    }\n\n    render() {\n        const { array } = this.state;\n        const bars = this.drawBars(array);\n\n        return (\n            <div className=\"container\" style={{backgroundColor: \"lightyellow\", width: window.innerWidth, height: window.innerHeight, textAlign: \"center\"}}>\n                <span style={{marginRight: 25}}>Size</span>\n                <Slider x={this.state.arraySize} xmin={5} xmax={100} xstep={5} onChange={({x}) => this.setState({ arraySize: x })} onDragEnd={() => this.randomizeArray()}/>\n                <input type=\"text\" value={this.state.arraySize} style= {{ width: 22, marginLeft: 15}} disabled={true}/>\n                <br/>\n                <span style={{marginRight: 25}}>Speed</span>\n                <Slider x={this.state.sortSpeed} xmin={1} xmax={250} xstep={1} onChange={({x}) => this.setState({ sortSpeed: x })}/>\n                <input type=\"text\" value={this.state.sortSpeed} style= {{ width: 22, marginLeft: 15}} disabled={true}/>\n                <br /><br/><br/>\n                {bars}\n                \n                <br />\n                    <button onClick={() => this.randomizeArray()}>New Array</button>\n                <div style={{textAlign: \"center\"}}>\n                    <br/>                    \n                    <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n                    <button onClick={() => this.mergeSort()}>Merge Sort</button>\n                    <button onClick={() => this.selectionSort()}>Selection Sort</button>\n                    <button onClick={() => this.insertionSort()}>insertion Sort</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './Visualizer/Visualizer';\n\nfunction App() {\n  return (\n    <SortingVisualizer></SortingVisualizer>\n  );    \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}