{"version":3,"sources":["Visualizer/PopUp.js","Visualizer/Visualizer.js","App.js","serviceWorker.js","index.js"],"names":["PopUp","handleClick","props","toggle","className","onClick","this","style","color","borderStyle","padding","src","marginBottom","Component","SortingVisualizer","togglePop","setState","seen","state","w","sortSpeed","values","states","arr","i","length","j","a","b","swap","key","n","sleep","min_idx","start","end","draw","partition","index","Promise","all","quickSort","pivotValue","pivotIndex","len","mid","Math","floor","left","slice","right","merge","mergeSort","result","lLen","rLen","l","r","push","concat","total","avg","splice","alert","temp","sort","ms","resolve","setTimeout","min","max","array","window","innerWidth","innerHeight","random","backgroundColor","height","setup","p5","parentRef","drawingContext","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","createCanvas","Array","width","newArray","clear","background","fill","stroke","rect","marginRight","marginTop","x","xmin","xmax","xstep","onChange","onDragEnd","type","value","marginLeft","disabled","class","bubbleSort","margin","insertionSort","selectionSort","thanosSort","bernieSort","stalinSort","buddhaSort","React","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10b3487a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nexport default class PopUp extends Component {\n    handleClick = () => {\n        this.props.toggle();\n    };\n    render() {\n        return (\n            <div className=\"modal\">\n                <br />\n                <div className=\"modal_content\">\n                    <span className=\"close\" onClick={this.handleClick} style={{color: 'red', borderStyle: 'dotted', padding: '2px'}}>&times;Close    </span>\n                </div>\n                <img src={\"https://s.faketrumptweet.com/kjogvwvg_a8o599_ixl1el.png\"} style = {{marginBottom: '50%'}} />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './Visualizer.css';\nimport Slider from 'react-input-slider';\nimport Sketch from 'react-p5';\nimport PopUp from \"./PopUp\"; \n\n//npm run deploy\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            w: 30,\n            sortSpeed: 200,\n            values: [],\n            states: [],\n            seen: false\n        };\n    };\n\n    togglePop = () => {\n        this.setState({\n            seen: !this.state.seen\n        });\n    };\n\n    async bubbleSort(arr) {\n        for(let i  = 0; i < arr.length - 1; i ++) {\n            for(let j = 0; j < arr.length - i - 1; j ++) {\n                let a = arr[j];\n                let b = arr[j + 1];\n                if(a > b) {\n                    await this.swap(arr, j, j + 1);\n                }\n            }\n        }\n    }\n    \n    async insertionSort(arr) {\n        let key = 0, j = 0;\n        let n = arr.length;\n        for(let i = 1; i < n; i ++) {\n            key = arr[i];\n            j = i - 1;\n\n            while(j >= 0 && arr[j] > key) {\n                arr[j + 1] = arr[j];\n                await this.sleep((251 - this.state.sortSpeed) / n);\n                j --;\n            }\n            arr[j + 1] = key;\n            await this.sleep((251 - this.state.sortSpeed) / n);\n        }\n    };\n\n    async selectionSort(arr) {\n        let min_idx = 0;\n        let n = arr.length;\n        for(let i = 0; i < arr.length - 1; i ++) {\n            min_idx = i;\n            for(let j = i + 1; j < arr.length; j ++) {\n                if(arr[j] < arr[min_idx]) {\n                    min_idx = j;\n                    await this.sleep((251 - this.state.sortSpeed) / n);\n                }\n            }\n            await this.swap(arr, min_idx, i);\n        }\n    };\n\n    async quickSort(arr, start, end) {\n        this.setState({\n            draw: true\n        })\n        if (start >= end) {\n            return;\n        }\n        let index = await this.partition(arr, start, end);\n        this.state.states[index] = -1;\n\n        await Promise.all([\n            this.quickSort(arr, start, index - 1),\n            this.quickSort(arr, index + 1, end)\n        ]);\n    };\n\n    async partition(arr, start, end) {\n        for(let i = start; i < end; i ++) {\n            this.state.states[i] = 1;\n        }\n\n        let pivotValue = arr[end];\n        let pivotIndex = start;\n        this.state.states[pivotIndex] = 0;\n\n        for(let i = start; i < end; i ++) {\n            if(arr[i] < pivotValue) {\n                await this.swap(arr, i, pivotIndex);\n                this.state.states[pivotIndex] = -1;\n                pivotIndex ++;\n                this.state.states[pivotIndex] = 0;\n            }\n        }\n\n        await this.swap(arr, pivotIndex, end);\n\n        for(let i = start; i < end; i ++) {\n            if (i !== pivotIndex) {\n                this.state.states[i] = -1;\n            }\n        }\n\n        return pivotIndex;\n    };\n\n    async mergeSort(arr) {\n        var len = arr.length;\n        if(len < 2) {\n            return arr;\n        }\n        var mid = Math.floor(len/2),\n            left = arr.slice(0,mid),\n            right =arr.slice(mid);\n\n        return this.merge(this.mergeSort(left), this.mergeSort(right));\n    };\n\n    async merge(left, right) {\n        var result = [],\n            lLen = left.length,\n            rLen = right.length,\n            l = 0,\n            r = 0;\n        while(l < lLen && r < rLen){\n            if(left[l] < right[r]){\n                result.push(left[l++]);\n            }\n            else{\n                result.push(right[r++]);\n            }\n        }  \n        //remaining part needs to be addred to the result\n        return result.concat(left.slice(l)).concat(right.slice(r));\n    };\n\n    async heapSort() {\n\n    };\n\n    async heapify() {\n\n    };\n\n    async bernieSort(arr) {\n        //replace all values with the mean\n        var total = 0;\n        for(var i = 0; i < arr.length; i++) {\n            total += arr[i];\n        }\n        var avg = total / arr.length;\n\n        for(i = 0; i < arr.length; i++) {\n            await this.sleep(15);\n            arr[i] = avg;\n        }\n    };\n\n    async thanosSort(arr) {\n        for (var i = 0; i < arr.length; i++) {\n            await this.sleep(15);\n            arr.splice(i + 1, 1);\n        }\n        this.quickSort(this.state.values, 0, this.state.values.length - 1);\n    };\n\n    //Description: Deletes all the elements that are not in order\n    async stalinSort(arr) {\n        alert(\"Stalin Sort deletes all the elements that are not already in order  ☭\")\n        const temp = arr.slice();\n        temp.sort();\n        for (var i = 0; i < arr.length; i++) {\n            if(arr[i] !== temp[i]) {\n                await this.sleep(25);\n                arr.splice(i, 1);\n                i --;\n            }\n        }\n    };\n\n    async buddhaSort(arr) {\n        alert(\"The array, like all things, is ephemeral, thus its order is insignificant. Leave the array as it is, and pursue enlightment instead.\");\n    };\n\n    async swap(arr, a, b) {\n        await this.sleep(251 - this.state.sortSpeed);\n        let temp = arr[a];\n        arr[a] = arr[b];\n        arr[b] = temp;\n    };\n\n    sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    };\n\n    newArray() {\n        const array = [];\n\n        for(let i = 0; i < Math.floor(window.innerWidth / this.state.w); i ++) {\n            array.push(randomInt(20, window.innerHeight - 185));\n        }\n        this.setState({ values: array });\n    }; \n\n    render() {\n        return (\n            <div className=\"App\" style = {{ backgroundColor: 'lightyellow', height: '100% !important'}}>\n\t\t\t\t<Sketch\n                    setup={(p5, parentRef) => {\n                        p5.drawingContext.shadowOffsetX = 5;\n                        p5.drawingContext.shadowOffsetY = -5;\n                        p5.drawingContext.shadowBlur = 10;\n                        p5.drawingContext.shadowColor = 'black';\n                        p5.createCanvas(window.innerWidth, window.innerHeight - 185);\n                        this.state.values = new Array(Math.floor(p5.width / this.state.w));\n                        this.newArray();\n\t\t\t\t\t}}\n                    \n                    draw = {(p5) => {\n                        p5.clear();\n                        p5.background('lightyellow');\n                        for (let i = 0; i < this.state.values.length; i ++) {\n                            p5.fill('pink');\n                            p5.stroke('lightyellow');\n                            p5.rect(i * this.state.w, p5.height - this.state.values[i], this.state.w, this.state.values[i], 20, 20, 0, 0);\n                        }\n                    \n                        \n                        // if(this.state.draw) {\n                        //     for (let i = 0; i < this.state.values.length; i ++) {\n                        //         if (this.state.states[i] === 0) {\n                        //             p5.fill('#E0777D');\n                        //         } else if (this.state.states[i] === 1) {\n                        //             p5.fill('#D6FFB7');\n                        //         } else {\n                        //             p5.fill(255);\n                        //         }\n                        //         p5.rect(i * this.state.w, p5.height - this.state.values[i], this.state.w, this.state.values[i]);\n                        //     }\n                        // } else {\n                        //     for (let i = 0; i < this.state.values.length; i ++) {\n                        //         p5.rect(i * this.state.w, p5.height - this.state.values[i], this.state.w, this.state.values[i]);\n                        //     }\n                        // }\n                        // this.setState({\n                        //     draw: false\n                        // })\n                    }}\n\t\t\t\t/>\n\n                <br />\n                <span style={{marginRight: 25, marginTop: 20}}>Size</span>\n                <Slider x={this.state.w} xmin={5} xmax={window.innerWidth / 4} xstep={1} onChange={({x}) => this.setState({ w: x })} onDragEnd={() => this.newArray()} />\n                <input type=\"text\" value={Math.floor(window.innerWidth / this.state.w)} style= {{ width: 22, marginLeft: 15}} disabled={true}/>\n                \n                <br/>\n                <span style={{marginRight: 25}}>Speed</span>\n                <Slider x={this.state.sortSpeed} xmin={1} xmax={250} xstep={1} onChange={({x}) => this.setState({ sortSpeed: x })}/>\n                <input type=\"text\" value={this.state.sortSpeed} style= {{ width: 22, marginLeft: 15, marginBottom: 10}} disabled={true}/>\n\n                <br />\n                <button class=\"button2\" onClick={() =>  this.newArray(this.state.values, 0, this.state.values.length - 1)}>New Array</button>\n\n                <br /><br /><br />\n                <button class=\"button\" onClick={() =>  this.bubbleSort(this.state.values)} style={{ margin: 5 }}>Bubble Sort</button>\n                <button class=\"button\" onClick={() =>  this.insertionSort(this.state.values, 0, this.state.values.length - 1)} style={{ margin: 5 }}>Insertion Sort</button>\n                <button class=\"button\" onClick={() =>  this.selectionSort(this.state.values, 0, this.state.values.length - 1)} style={{ margin: 5 }}>Selection Sort</button>\n                <button class=\"button\" onClick={() =>  this.quickSort(this.state.values, 0, this.state.values.length - 1)} style={{ margin: 5 }}>Quick Sort</button>\n                {/* <button class=\"button\" onClick={() =>  this.mergeSort(this.state.values)} style={{ margin: 5 }}>Merge Sort</button> */}\n                {/* <button class=\"button\" onClick={() =>  this.heapSort(this.state.values, 0, this.state.values.length - 1)} style={{ margin: 5 }}>Heap Sort</button> */}\n                <button class=\"button\" onClick={() =>  this.thanosSort(this.state.values)} style={{ margin: 5 }}>Thanos Sort</button>\n                <button class=\"button\" onClick={() =>  this.togglePop()} style={{ margin: 5 }}>Trump Sort</button>\n                {this.state.seen ? <PopUp toggle={this.togglePop} /> : null}\n                <button class=\"button\" onClick={() =>  this.bernieSort(this.state.values)} style={{ margin: 5 }}>Bernie Sort</button>\n                <button class=\"button\" onClick={() =>  this.stalinSort(this.state.values)} style={{ margin: 5 }}>Stalin Sort</button>\n                <button class=\"button\" onClick={() =>  this.buddhaSort(this.state.values)} style={{ margin: 5 }}>Buddha Sort</button>\n\t\t\t</div>\n        );\n    }\n}\n\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './Visualizer/Visualizer';\n\nfunction App() {\n  return (\n    <SortingVisualizer></SortingVisualizer>\n  );    \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}